syntax = "proto3";

option go_package = "github.com/tcap/chitty-chat/proto";

package chittychat;

service ChittyChat {
    // Client joins the chat
    rpc Join(JoinRequest) returns (BroadcastMessage);

    // Client publishes a message
    rpc PublishMessage(PublishRequest) returns (Ack);

    // Client leaves the chat
    rpc Leave(LeaveRequest) returns (Ack);

    // Bidirectional streaming RPC for real-time message exchange
    rpc MessageStream(stream ClientMessage) returns (stream ServerMessage);
}

message JoinRequest {
    string participant_name = 1;
}

message LeaveRequest {
    string participant_name = 1;
}

message PublishRequest {
    string participant_name = 1;
    string message = 2; // The message has a limit of 128 characters
    int64 lamport_time = 3; // Lamport logical timestamp
}

message BroadcastMessage {
    string message = 1;
    string participant_name = 2;
    int64 lamport_time = 3; // Lamport logical timestamp
}

message Ack {
    bool success = 1;
    string info = 2;
}

message Empty {}

// Messages to handle different payloads in the stream
message ClientMessage {
    oneof payload {
        JoinRequest join = 1;
        PublishRequest publish = 2;
        LeaveRequest leave = 3;
    }
}

message ServerMessage {
    oneof payload {
        BroadcastMessage broadcast = 1;
        Ack ack = 2;
    }
}